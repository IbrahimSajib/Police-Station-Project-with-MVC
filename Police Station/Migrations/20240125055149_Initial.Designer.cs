// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Police_Station.Models.DbContext;

#nullable disable

namespace Police_Station.Migrations
{
    [DbContext(typeof(PoliceStationDbContext))]
    [Migration("20240125055149_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "70cecf66-f00e-406f-ae29-0feb2183689c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f672f1be-450b-4899-b9a5-13a0ff856015",
                            Name = "Police",
                            NormalizedName = "Police"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c02f71c8-a822-4b3a-900c-5c62478b32f0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa52cb74-1b19-4279-bf1a-136be9f25bf6",
                            Email = "Admin1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@GMAIL.COM",
                            NormalizedUserName = "ADMIN1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELpEJwt9NoW60ir+opL5fhT759S6YNST7PWxQIanp0MNBHte1fB/82FeVokXLbJV9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "edc9265a-3705-4213-919e-f3fe836bec06",
                            TwoFactorEnabled = false,
                            UserName = "Admin1@gmail.com"
                        },
                        new
                        {
                            Id = "4b9d054d-bcb0-475e-96be-7e07d5ee3b85",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7fefed17-02e8-4157-9ba3-89933ed37345",
                            Email = "Police1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "POLICE1@GMAIL.COM",
                            NormalizedUserName = "POLICE1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELrjzpr1yEX8N/XGGu+gLZeEF9RJCPfGUDejnOepYAq5kI7yXsR/mQseJhS+xGC/8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "493bdc10-858f-437c-898b-d063e03bc109",
                            TwoFactorEnabled = false,
                            UserName = "Police1@gmail.com"
                        },
                        new
                        {
                            Id = "b7f46612-41d2-47ba-af30-f957a680d92a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "efe5f48c-1d7f-4953-aec7-fd8fc4a38ff4",
                            Email = "Ibrahim@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IBRAHIM@EXAMPLE.COM",
                            NormalizedUserName = "IBRAHIM@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKJqNaTOyfGv7SBSEbepjImVHMBiYXS6VOY0LdUeBKfo2AQaqYUICRAV/VNCj0Wimg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "646d6950-0d0b-4d07-8e73-b78335961b26",
                            TwoFactorEnabled = false,
                            UserName = "Ibrahim@example.com"
                        },
                        new
                        {
                            Id = "0442b285-375d-48a0-8f47-d6e21bf342c9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e07b5879-a435-408f-b60d-392f4f04afab",
                            Email = "Sajib@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SAJIB@EXAMPLE.COM",
                            NormalizedUserName = "SAJIB@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEsTh0JaJT1CjokGeyw/93XtM7xsqI3ZnPa3QOGpwokdnCuJKZAi5atxYq+EzDu8JQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05fb5df2-58ad-4bb9-8671-090c2d98c7e9",
                            TwoFactorEnabled = false,
                            UserName = "Sajib@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c02f71c8-a822-4b3a-900c-5c62478b32f0",
                            RoleId = "70cecf66-f00e-406f-ae29-0feb2183689c"
                        },
                        new
                        {
                            UserId = "4b9d054d-bcb0-475e-96be-7e07d5ee3b85",
                            RoleId = "f672f1be-450b-4899-b9a5-13a0ff856015"
                        },
                        new
                        {
                            UserId = "b7f46612-41d2-47ba-af30-f957a680d92a",
                            RoleId = "70cecf66-f00e-406f-ae29-0feb2183689c"
                        },
                        new
                        {
                            UserId = "0442b285-375d-48a0-8f47-d6e21bf342c9",
                            RoleId = "70cecf66-f00e-406f-ae29-0feb2183689c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Police_Station.Models.CaseApplication", b =>
                {
                    b.Property<int>("CaseApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseApplicationId"));

                    b.Property<string>("CrimeSpot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuspectAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SuspectAge")
                        .HasColumnType("int");

                    b.Property<string>("SuspectGender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuspectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuspectPhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuspectProfession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VictimAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VictimAge")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("VictimGender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VictimMaritalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("VictimNID")
                        .HasColumnType("bigint");

                    b.Property<string>("VictimName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VictimPhoneNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VictimProfession")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WitnessAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WitnessAge")
                        .HasColumnType("int");

                    b.Property<string>("WitnessGender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WitnessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WitnessPhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WitnessProfession")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CaseApplicationId");

                    b.ToTable("CaseApplications");
                });

            modelBuilder.Entity("Police_Station.Models.Criminal", b =>
                {
                    b.Property<int>("CriminalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CriminalId"));

                    b.Property<int?>("Age")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("CaseApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CriminalId");

                    b.HasIndex("CaseApplicationId");

                    b.ToTable("Criminals");
                });

            modelBuilder.Entity("Police_Station.Models.InvestigationInfo", b =>
                {
                    b.Property<int>("InvestigationInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvestigationInfoId"));

                    b.Property<int?>("CaseApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PoliceOfficerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvestigationInfoId");

                    b.HasIndex("CaseApplicationId");

                    b.HasIndex("PoliceOfficerId");

                    b.ToTable("InvestigationInfos");
                });

            modelBuilder.Entity("Police_Station.Models.PoliceOfficer", b =>
                {
                    b.Property<int>("PoliceOfficerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PoliceOfficerId"));

                    b.Property<int?>("BadgeNumber")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("BadgeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("Shift")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Supervisor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PoliceOfficerId");

                    b.ToTable("PoliceOfficers");

                    b.HasData(
                        new
                        {
                            PoliceOfficerId = 1,
                            BadgeNumber = 123,
                            BadgeType = "Metal",
                            DateOfBirth = new DateTime(1980, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Homicide",
                            JoinDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Officer A",
                            Rank = "Sergeant",
                            Salary = 50000.0,
                            Shift = "Day",
                            Supervisor = "Chief B"
                        },
                        new
                        {
                            PoliceOfficerId = 2,
                            BadgeNumber = 124,
                            BadgeType = "Plastic",
                            DateOfBirth = new DateTime(1981, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Robbery",
                            JoinDate = new DateTime(2001, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Officer B",
                            Rank = "Lieutenant",
                            Salary = 60000.0,
                            Shift = "Night",
                            Supervisor = "Chief A"
                        },
                        new
                        {
                            PoliceOfficerId = 3,
                            BadgeNumber = 125,
                            BadgeType = "Metal",
                            DateOfBirth = new DateTime(1982, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Fraud",
                            JoinDate = new DateTime(2002, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Officer C",
                            Rank = "Captain",
                            Salary = 70000.0,
                            Shift = "Day",
                            Supervisor = "Chief B"
                        },
                        new
                        {
                            PoliceOfficerId = 4,
                            BadgeNumber = 126,
                            BadgeType = "Plastic",
                            DateOfBirth = new DateTime(1983, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Narcotics",
                            JoinDate = new DateTime(2003, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Officer D",
                            Rank = "Detective",
                            Salary = 80000.0,
                            Shift = "Night",
                            Supervisor = "Chief A"
                        },
                        new
                        {
                            PoliceOfficerId = 5,
                            BadgeNumber = 127,
                            BadgeType = "Metal",
                            DateOfBirth = new DateTime(1984, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Patrol",
                            JoinDate = new DateTime(2004, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Officer E",
                            Rank = "Inspector",
                            Salary = 90000.0,
                            Shift = "Day",
                            Supervisor = "Chief B"
                        },
                        new
                        {
                            PoliceOfficerId = 6,
                            BadgeNumber = 128,
                            BadgeType = "Plastic",
                            DateOfBirth = new DateTime(1985, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Traffic",
                            JoinDate = new DateTime(2005, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Officer F",
                            Rank = "Sergeant",
                            Salary = 100000.0,
                            Shift = "Night",
                            Supervisor = "Chief A"
                        },
                        new
                        {
                            PoliceOfficerId = 7,
                            BadgeNumber = 129,
                            BadgeType = "Metal",
                            DateOfBirth = new DateTime(1986, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Homicide",
                            JoinDate = new DateTime(2006, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Officer G",
                            Rank = "Lieutenant",
                            Salary = 110000.0,
                            Shift = "Day",
                            Supervisor = "Chief B"
                        },
                        new
                        {
                            PoliceOfficerId = 8,
                            BadgeNumber = 130,
                            BadgeType = "Plastic",
                            DateOfBirth = new DateTime(1987, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Robbery",
                            JoinDate = new DateTime(2007, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Officer H",
                            Rank = "Captain",
                            Salary = 120000.0,
                            Shift = "Night",
                            Supervisor = "Chief A"
                        },
                        new
                        {
                            PoliceOfficerId = 9,
                            BadgeNumber = 131,
                            BadgeType = "Metal",
                            DateOfBirth = new DateTime(1988, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Fraud",
                            JoinDate = new DateTime(2008, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Officer I",
                            Rank = "Detective",
                            Salary = 130000.0,
                            Shift = "Day",
                            Supervisor = "Chief B"
                        },
                        new
                        {
                            PoliceOfficerId = 10,
                            BadgeNumber = 132,
                            BadgeType = "Plastic",
                            DateOfBirth = new DateTime(1989, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Narcotics",
                            JoinDate = new DateTime(2009, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Officer J",
                            Rank = "Inspector",
                            Salary = 140000.0,
                            Shift = "Night",
                            Supervisor = "Chief A"
                        });
                });

            modelBuilder.Entity("Police_Station.Models.Prison", b =>
                {
                    b.Property<int>("PrisonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrisonId"));

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrisonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrisonId");

                    b.ToTable("Prisons");

                    b.HasData(
                        new
                        {
                            PrisonId = 1,
                            Capacity = 8000,
                            ContactInfo = "+8801712345678",
                            Location = "Keraniganj, Dhaka",
                            PrisonName = "Dhaka Central Jail"
                        },
                        new
                        {
                            PrisonId = 2,
                            Capacity = 2000,
                            ContactInfo = "+8801812312345",
                            Location = "Chittagong",
                            PrisonName = "Chittagong Central Jail"
                        },
                        new
                        {
                            PrisonId = 3,
                            Capacity = 1500,
                            ContactInfo = "+8801912341234",
                            Location = "Rajshahi",
                            PrisonName = "Rajshahi Central Jail"
                        });
                });

            modelBuilder.Entity("Police_Station.Models.PrisonRecord", b =>
                {
                    b.Property<int>("PrisonRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrisonRecordId"));

                    b.Property<int?>("CriminalId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EntryDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<int?>("PrisonId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonForImprisonment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrisonRecordId");

                    b.HasIndex("CriminalId");

                    b.HasIndex("PrisonId");

                    b.ToTable("PrisonRecords");
                });

            modelBuilder.Entity("Police_Station.Models.ReportAnalysis", b =>
                {
                    b.Property<int>("ReportAnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportAnalysisId"));

                    b.Property<string>("AnalysisResults")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CaseApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("Conclusions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PoliceOfficerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReportingDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.HasKey("ReportAnalysisId");

                    b.HasIndex("CaseApplicationId");

                    b.HasIndex("PoliceOfficerId");

                    b.ToTable("ReportAnalysis");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Police_Station.Models.Criminal", b =>
                {
                    b.HasOne("Police_Station.Models.CaseApplication", "CaseApplication")
                        .WithMany()
                        .HasForeignKey("CaseApplicationId");

                    b.Navigation("CaseApplication");
                });

            modelBuilder.Entity("Police_Station.Models.InvestigationInfo", b =>
                {
                    b.HasOne("Police_Station.Models.CaseApplication", "CaseApplication")
                        .WithMany()
                        .HasForeignKey("CaseApplicationId");

                    b.HasOne("Police_Station.Models.PoliceOfficer", "PoliceOfficer")
                        .WithMany("InvestigationInfos")
                        .HasForeignKey("PoliceOfficerId");

                    b.Navigation("CaseApplication");

                    b.Navigation("PoliceOfficer");
                });

            modelBuilder.Entity("Police_Station.Models.PrisonRecord", b =>
                {
                    b.HasOne("Police_Station.Models.Criminal", "Criminal")
                        .WithMany()
                        .HasForeignKey("CriminalId");

                    b.HasOne("Police_Station.Models.Prison", "Prison")
                        .WithMany("PrisonRecords")
                        .HasForeignKey("PrisonId");

                    b.Navigation("Criminal");

                    b.Navigation("Prison");
                });

            modelBuilder.Entity("Police_Station.Models.ReportAnalysis", b =>
                {
                    b.HasOne("Police_Station.Models.CaseApplication", "CaseApplication")
                        .WithMany()
                        .HasForeignKey("CaseApplicationId");

                    b.HasOne("Police_Station.Models.PoliceOfficer", "PoliceOfficer")
                        .WithMany()
                        .HasForeignKey("PoliceOfficerId");

                    b.Navigation("CaseApplication");

                    b.Navigation("PoliceOfficer");
                });

            modelBuilder.Entity("Police_Station.Models.PoliceOfficer", b =>
                {
                    b.Navigation("InvestigationInfos");
                });

            modelBuilder.Entity("Police_Station.Models.Prison", b =>
                {
                    b.Navigation("PrisonRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
